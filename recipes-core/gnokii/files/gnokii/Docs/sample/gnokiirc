# This is a sample config file for unix-like systems.  See Windows/gnokiirc
# for a Windows sample.
# 
# Copy this file into $XDG_CONFIG_HOME/gnokii/config (which is
# $HOME/.config/gnokii/config in most cases) and change port, connection and
# model settings following the comments below.  See
# http://wiki.gnokii.org/index.php/Config for working examples.

[global]

# Set port to the physical port used to connect to your phone.
port = none

# Then using phone connected to the serial port (not USB) you should
# use (for Linux):
# port = /dev/ttyS0
#
# For MacOSX you will need something like:
# port = /dev/cu.USA28X1P1.1
#
# FreeBSD (probably NetBSD and OpenBSD too) use:
# port = /dev/cuaa0
#
# With Linux-IrDA you will want to use
# port = /dev/ircomm0
# or similar.
#
# Use this setting also for the Bluetooth connection:
# port = aa:bb:cc:dd:ee:ff
# when using it with AT driver set it to:
# port = /dev/rfcomm0
# or similar.
#
# For the Linux USB cables you will need one of the following settings (or
# similar)
# port = /dev/ttyUSB0
# port = /dev/tts/USB0
# port = /dev/ttyACM0
# the last one will work only with AT driver. The correct setting should be
# given in the dmesg output.
#
# If you use connection type dku2libusb use it to denote which use endpoint
# you'd wish to use. It is useful when you have more than one phone connected
# to your computer using DKU2 cable. Numbering goes from 1 upwards.
# Default is 1.
# port = 1
#
# If you use connection type phonet use it to denote the network device to use.
# See README-6510 for more details.
# port = usbpn0

# Set model to the model number of your phone.
# If you can't figure out what to put here read the FAQ.
# If it still doesn't help, consult gnokii-ml or #gnokii at freenode.
model = fake
#
# For most Nokia phones (non-Symbian) use:
# model = 6510
#
# For non-Nokia phones and when you want to use AT mode use:
# model = AT
#
# For Nokia phones built before year 2000 try one of the following values
# for model: 6110, 7110, 6510, 3110, 2110, 6160.
#
# For Symbian phones, install gnapplet.sis on the phone and use:
# model = symbian

# Set IrDA device name.
# If you use irda connection you may want gnokii to autodetect the irda
# device it connects to. This is fine for most of the cases. if you have
# more than one device in range you may want to give manually the device
# name so gnokii correctly recognizes it. Use the name that you can see
# in the discovery log when the phone with infrared is in the range of
# your irda port.
# Note that you need to set this for each phone_ section separately. It
# isn't nested from the global section.
# irda_string = Nokia 6610i

# Initlength controls the number of characters sent to the
# phone during initialisation.  You can either set it to
# the word "default" or a positive integer.
#
# You can try setting this value if you want to connect
# to the phone quicker.  If you've never noticed the
# connection to be slow, it is suggested that you
# leave this alone.  Read the initialisation code in fbus-xxxx
# to understand what this changes if you're curious.
initlength = default

# Most USB cables for Nokia phones should work with the libusb driver
# (recommended)
# connection = dku2libusb
# and with the new kernel driver (Linux 2.6.28+)
# connection = phonet
# If you have 6210/6250/7110 phone and dau9p cable (the one you can
# use with 6100 series and cannot use hardware modem from the phone)
# you may want to use 'dau9p' value to get faster initialization.
# If you use dlr3 or dlr3p cable for nokia phones in FBUS mode (ie.
# you don't use model = AT) you may want to use 'dlr3p' value here.
# Note that it is recommended and currently the best way to use this
# cable with nk6510 driver.
connection = serial
# With DKU-2 cable use the following setting with the now unsupported Linux
# kernel driver that was provided with older libgnokii versions:
# connection = dku2
# With DKU-5 cable use the following setting
# connection = dku5
# For Bluetooth and AT driver use the following setting
# connection = serial
# For other Bluetooth settings use
# connection = bluetooth
# For infrared connection with phones other than Nokia 6110/6130/6150 use:
# connection = irda
# Don't forget to run: 'irattach irda0 -s' or similar before running gnokii
# For the nk6110 driver only connection=infrared is valid for IrDA.
# See Docs/gnokii-ir-howto for more detailes on this.
# For connection with a PC/SC compatible Smart Card reader use:
# connection = pcsc

# Set this to 'yes' if you want gnokii to set and check the lock file in
# /var/lock directory. It avoids potential conflicts with other serial
# port software (eg. minicom). If you have wrong permissions for the
# directory, a warning will be generated. If you don't want a lockfile, set
# it to 'no'.
use_locking = yes

# Baudrate to use on serial port connections.
# Currently used only by models AT and BIP/CIMD. Defaults to 19200.
# Set to 0 to disable port speed setting. Try doing this when gnokii hangs
# on opening the serial port:
# > Serial device: opening device /dev/ttyACM0
serial_baudrate = 19200

# Force waiting after each sent character the specified usec time.
# Value -1 forces the fastest 'block' writing,
# value 0 writes each character separately without any explicit waiting,
# other positive values specify the appropriate 1/1000000 sec delaying.
# Siemens M20 requires at least "1"!  FIXME: Model-driven autodetection
#serial_write_usleep = 10000

# Force serial port handshaking mode, useful primarily for "AT" model.
# Gnokii "AT" model uses software handshake by default.
# Possible values: hardware (RTS/CTS - 7 wires) or software (XON/XOFF - 3 wires)
#handshake = software

# If defined (not commented out by '#') it will quit Gnokii anytime
# when DCD line will drop.
#require_dcd = 1

# If set to 0, DTR and RTS will not be set on the serial line. Default is 1.
# Try doing this when gnokii hangs on opening the serial port:
# > Serial device: opening device /dev/ttyACM0
#set_dtr_rts = 0

# If you are using a bluetooth connection, you can specify the rfcomm
# channel number here. If you don't specify the value, it is autodetected
# on connection (it may take an additional second). FBUS connections always
# ignore this value and use channel 14.
#rfcomm_channel = 1

# There may happen various timeouts during the communication with the phone.
# This parameter enables the retransmission policy. Ie. if the phone doesn't
# respond, we send the frame again. This happened mainly with the older
# phones. You may want to enable it when you see mysterious timeouts.
# Be very careful with this option. It is suspected to cause phone breakage
# with new DCT4 phones (like Nokia 6100). By default it is switched off
# (sm_retry = 0)
#sm_retry = 1

# Location of the scripts to be run at specified moments.
# connect_script: right after establishing connection with the device
# disconnect_script: right before closing the connection
# You may find handy to use connect_script
# or disconnect_script to connect your modem to SMS Center when using BIP or
# CIMD protocols. Non-absolute path is relative to the specific directory
# where gnokii is run!
#connect_script = /absolute/path/to/gnokii/Docs/sample/cimd-connect
#disconnect_script =

# The following settings allow to choose an authentication method upon the
# initialization of the phone. It is effective only for AT driver.
# Authentication type: none, interactive, text, binary, script
authentication_type = none
#   When 'none' type is selected, no additional action on initialization is
#   taken
#authentication_type = interactive
#   When 'interactive' type is selected it allows the application to
#   implement own authentication method.  When no authentication is
#   implemented by the application, the type 'text' is assumed.
#authentication_type = text
#   When 'pin' type is selected gnokii will issue:
#    AT+CPIN?
#   Depending on the outcome different actions will be taken.
#    +CPIN: READY - no action
#    +CPIN: SIM PIN - authenticate using PIN
#    +CPIN: SIM PUK - authenticate using PUK
#    +CPIN: SIM PIN2 - authenticate using PIN2
#    +CPIN: SIM PUK2 - authenticate using PUK2
#   PIN/PUK will be read from the file pointed out by 'auth_file' variable.
#   File must not be world or group readable/writable/exacutable.
#   The syntax of the file is (see also Docs/sample/pin file):
#    PIN:1234
#    PUK:12345678
#    PIN2:5678
#    PUK2:0987654321
#    SEC:12345
#   Supported code types are: PIN, PIN2, PUK, PUK2, SEC
#   If the path variable is empty or points to non existent file or to the
#   file with wrong permissions, PIN/PUK will be read from the interactive
#   prompt (stdin).
#authentication_type = interactive
#   When 'interactive' type is selected it allows the application to
#   implement own authentication method.  When no authentication is
#   implemented by the application, the type 'text' is assumed.
#authentication_type = noninteractive
#   When 'noninteractive' type is selected it allows the application to
#   implement own authentication method.  When no authentication is
#   implemented by the application, the type 'text' is assumed.  When
#   auth_file cannot be found, interactive prompt is not used but error is
#   returned.  This is recommended for libgnokii usage by any kind of
#   daemons.
#authentication_type = binary
#   For future use. Reads binary authentication information from the file
#   pointed out by 'auth_file' variable. Currently does nothing.
#
# Authentication procedures summary
# Type           | Own registered method | File method | Prompt method
# --------------------------------------------------------------------
# text           | N/A                   | 1st         | 2nd
# interactive    | 1st                   | 2nd         | 3rd
# noninteractive | 1st                   | 2nd         | N/A

# Location of the file that includes authentication information. Used by
# authentication types text and binary.
#auth_file = 

# The order of executing scripts is as follows:
# 1. open()
# 2. connect_script()
# 3. authentication()
# ...
# n-1. disconnect_script()
# n. close()

# When sending SMS you can experience timeouts. This is the feature of the
# overloaded SMSCs. The phones waits for the response from the SMSC confirming
# that it received the short message. When the SMSC is DoSed with many requests
# it will take more time to get the response. Adjust it to your needs. The
# value is given in seconds to wait. Defaults to 10 seconds. Set to 0 to wait
# forever.
smsc_timeout = 10

# If your Nokia phone isn't correctly handled by libgnokii you can describe
# its features with a comma separated list of flags (and please write to the
# mailing list so it can be fixed).
# For phones older than Series 40 use OLD_DEFAULT; for Series 40 3rd Edition
# and later Series 40 use DEFAULT_S40_3RD; for all other Nokias use DEFAULT.
# Format is: product name=model name[,flag]...
# where product name is the corresponding string returned by gnokii --identify
# model name is the marketing name of the phone and valid flags are:
# AUTHENTICATION: phone needs a special protocol initialization
# CALENDAR: phone supports calendar events (first protocol)
# CALLERGROUP: phone supports caller groups in phonebooks
# DATA: phone supports an old non-AT protocol for data communications (DON'T use this)
# DEFAULT_S40_3RD: shortcut for DEFAULT, SMSFILE, EXTPBK2, EXTCALENDAR
# DEFAULT: shortcut for OLD_DEFAULT, CALLERGROUP, EXTPBK, FOLDERS
# DTMF: phone can send DTMF tones
# EXTCALENDAR: phone supports calendar events (second protocol)
# EXTPBK: phonebooks supports more than just name and number (first protocol)
# EXTPBK2: phonebooks supports more than just name and number (second protocol)
# FOLDERS: SMS are stored in IN, OU, ... instead of SM, ME
# FULLPBK: currently unused
# KEYBOARD: keypresses can be emulated by the computer
# NETMONITOR: phone supports Nokia NetMonitor
# OLD_DEFAULT: shortcut for SPEEDDIAL, SMS, DTMF, KEYBOARD, CALENDAR
# SMSFILE: SMS are stored in the phone's filesystem
# SMS: phone supports SMS
# SPEEDDIAL: phone supports speed dials
# XGNOKIIBREAKAGE: enable dangerous functions known to damage some phones (DON'T use this)
[flags]
#RM-237=3110c, DEFAULT_S40_30

[gnokii]
# Set this to the path where you want gnokii-errors to be stored.
# gnokii-errors file stores the information about unhandled frames
# received while communicating with gnokii.
# The default paths are:
#  on Windows: %APPDATA%\\gnokii
#  on MacOS X: $HOME/Library/Logs/gnokii
#  on everything else: $XDG_CACHE_HOME/gnokii or $HOME/.cache/gnokii
# Do not include filename in the path.
# Make sure that specified folder or directory exists. Otherwise the output
# will be redirected to stderr.
#gnokiierrorpath=.

[xgnokii]
# Set this to 1 if you want to break your phone with xgnokii. Works only
# with few Nokia models and FBUS communication
allow_breakage = 0

[gnokiid]
# Set bindir to point to the location of the various gnokiid binaries.
# In particular ensure that mgnokiidev is in this location, with
# permissions 4750, owned by root, group gnokii.  Ensure you
# are in the gnokii group and that the group exists...
bindir = /usr/local/sbin/

# Any entries in the following two sections will be set as environment
# variables when running the scripts.
# Handy for use for $VAR substitutions in your chat(8) script.
[connect_script]
# Don't put your phone number here!!!
TELEPHONE = 12345678

[disconnect_script]

[auth_script]

# The following parameters control how libgnokii handles the debugging messages.
# Currently there are three categories: "debug" controls the libgnokii
# normal debug output, "rlpdebug" controls the debug output of the RLP
# subsystem, and "xdebug" is used by the xgnokii or smsd.

[logging]

# where to log the debug output (on: stderr, off: /dev/null)
debug = on

# where to log the rlp debug output (on: stderr, off: /dev/null)
rlpdebug = off

# where to log X debug output (on: stderr, off: /dev/null)
xdebug = off

# In [phone_*] sections you can use all variables that were used in [global]
# section.  Only the following sections are global: [flags], [gnokii],
# [xgnokii], [gnokiid], [logging].

# Fake-phone can be used for testing Gnokii functionality without
# having a physical phone connected.
# Example usage:
# gnokii --config gnokiirc --phone fake --identify
[phone_fake]
port = foobar
model = fake
connection = serial

# This is internal configuration for fake driver. The purpose is mostly
# testing only.
[fake_driver]
sms_inbox = /tmp/sms
